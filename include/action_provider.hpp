#pragma once

//a simple class to initialize all the action methods and hand them out to action nodes
//there should only be a single instance of this class. I know singletons are not recommended,
//so maybe find whatever is the usual alternative

#include <memory>

#include "utility.hpp"
#include "die.hpp"

//container for data generated by an action method in the action node

class ActionProvider {
    public:
        ActionProvider();
        ~ActionProvider();

        std::function<void(actions::action_node_data&)>* GetAction(actions::action_id);

    private:
        std::unordered_map<actions::action_id,std::function<void(actions::action_node_data& data)>> m_action_map;
        void Initialize();
};